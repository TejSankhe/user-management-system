version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  pr_check: # runs not using Workflows must have a `pr_check` job as entry point

    working_directory: ~/circleci-webapp # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-webapp-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-webapp-{{ checksum "pom.xml" }}

      - run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
           #Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/demo-0.0.1-SNAPSHOT.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  build:
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - run:
          name: Install packages
          command: |
            sudo apt-get update && sudo apt-get install wget zip unzip python-pip python-dev build-essential -y
            python --version
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Build Artifact
          command: |
            ls -al
            echo "Building the artifact with Maven"
            mvn clean install
            cd target
            ls -al
            cd ../..
      - run:
          name: Zip Artifact
          command: |
            echo "current build number is ${CIRCLE_BUILD_NUM}"
            pwd
            echo "current directory content"
            ls -al
            echo "Making the codedeploy_artifact directory"
            mkdir -p codedeploy_artifact
            echo "Changing directory to codedeploy_artifact"
            cd codedeploy_artifact
            echo "Copying all .sh files from ../scripts directory to the codedeploy_artifact"
            cp ../scripts/*.sh .
            echo "Copying all .yml files from ../ directory to the codedeploy_artifact"
            cp ../*.yml .
            echo "Copying the jar file from ../target/demo-0.0.1-SNAPSHOT.jar to the codedeploy_artifact"
            cp ../target/demo-0.0.1-SNAPSHOT.jar .
            echo "Copying the properties from /src/main/resources to the codedeploy_artifact"
            cp ../src/main/resources/*.* .
            echo "current directory content"
            ls -al
            echo "Zipping all files in the codedeploy_artifact directory"
            zip -r csye6255-webapp-${CIRCLE_BUILD_NUM}.zip .
            ls -al
            pwd
            echo "Changing directory to root"
            cd ..
            pwd
            ls -al
      - run:
          name: Upload Artifact to S3
          command: |
            echo "Uploading Artifact to S3 bucket ${CODE_DEPLOY_S3_BUCKET}"
            cd codedeploy_artifact
            aws s3 cp csye6255-webapp-${CIRCLE_BUILD_NUM}.zip s3://${CODE_DEPLOY_S3_BUCKET}
            cd ..
      - run:
          name: Make CodeDeploy API call
          command: |
            aws configure set region ${AWS_REGION}
            echo "Calling CodeDeploy Agent to pick the artifact and deploy on EC2 instance"
            aws deploy create-deployment --application-name "csye6225-webapp" --deployment-group-name "csye6225-webapp-deployment" --s3-location bucket=${CODE_DEPLOY_S3_BUCKET},bundleType=zip,key=csye6255-webapp-${CIRCLE_BUILD_NUM}.zip


workflows:
  version: 2
  pr-check-workflow:
    jobs:
      - pr_check
  build_deploy-workflow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
